---

- debug:
    msg: 'Local user: {{local_user}}'

- name: Template out SSH config
  template:
    src: ssh_config.j2
    dest: ~/.ssh/config
  become_user: '{{ local_user }}'

- name: Template out hosts file
  template:
    src: hosts.j2
    dest: /etc/hosts

- name: Template out apt proxy config
  template:
    src: proxy.conf
    dest: /etc/apt/apt.conf.d/proxy.conf
  when: local_user != 'vagrant' # don't break stuff for testing

# append customizations to the existing ~/.bashrc rather than replace, incase
# things change between distros or releases
- block:
  - command: grep 'NTID_DOMAIN' ~/.bashrc
    ignore_errors: yes
    register: bashrc_grep
    become_user: '{{ local_user }}'

  - name: Export .bash_secrets and chown
    copy:
      content: '{{ bash_secrets }}'
      dest: '~/.bash_secrets'
      owner: '{{ local_user }}'
      group: '{{ local_user }}'
      mode: '0600'
    become_user: '{{ local_user }}'

  - name: Configure .bashrc
    blockinfile:
      dest: '~/.bashrc'
      block: |
        # source bash_secrets if it exists
        if [[ -f ~/.bash_secrets ]]; then
          source ~/.bash_secrets
        fi

        export http_proxy='http://{{ proxy_username }}:{{ proxy_password }}@{{ proxy_server }}:{{ proxy_port }}'
        export https_proxy='${http_proxy}'
        export HTTP_PROXY='${http_proxy}'
        export HTTPS_PROXY='${http_proxy}'
        export no_proxy='127.0.0.1,localhost'
        export NO_PROXY='${no_proxy}'
        alias ansible-vault='ansible-vault --vault-password-file=$ANSIBLE_VAULT_PASSWORD_FILE'
        alias pwgen='pwgen -s 16 1'
        alias getkey='shyaml get-value automation_private_ssh_key'
        function compare(){
          grep -vf '$1' '$2'
        }

        # Git terminal prompt colors
        #
        # Colours
        #
                RED='\[\033[0;31m\]'
             YELLOW='\[\033[1;33m\]'
              GREEN='\[\033[0;32m\]'
               BLUE='\[\033[1;34m\]'
          LIGHT_RED='\[\033[1;31m\]'
        LIGHT_GREEN='\[\033[1;32m\]'
              WHITE='\[\033[1;37m\]'
         LIGHT_GRAY='\[\033[0;37m\]'
         COLOR_NONE='\[\e[0m\]'
        
        # Functions
        #
        
        function _show_git_status {
          # Get the current git branch and colorize to indicate branch state
          # branch_name+ indicates there are stash(es)
          # branch_name? indicates there are untracked files
          # branch_name! indicates your branches have diverged
          local unknown untracked stash clean ahead behind staged unstaged diverged
          unknown='0;34'      # blue
          untracked='0;32'    # green
          stash='0;32'        # green
          clean='0;32'        # green
          ahead='0;33'        # yellow
          behind='0;33'       # yellow
          staged='0;96'       # cyan
          unstaged='0;31'     # red
          diverged='0;31'     # red
        
          if [[ $TERM = *256color ]]; then
            unknown='38;5;25'     # dark blue
            untracked='38;5;35'   # greenish
            stash='38;5;72'       # dull green
            clean='38;5;2'        # green
            ahead='38;5;220'      # yellow
            behind='38;5;142'     # darker yellow-orange
            staged='38;5;130'     # orangey
            unstaged='38;5;202'   # orange
            diverged='38;5;124'   # red
          fi
        
          branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
          if [ -n '$branch' ]; then
            git_status=$(git status 2> /dev/null)
            # If nothing changes the color, we can spot unhandled cases.
            color=$unknown
            if echo $git_status | grep -qe 'Untracked files'; then
              color=$untracked
              branch='${branch}?'
            fi
            if git stash show &>/dev/null; then
              color=$stash
              branch='${branch}+'
            fi
            if echo $git_status | grep -qe 'working directory clean'; then
              color=$clean
            fi
            if echo $git_status | grep -qe 'Your branch is ahead'; then
              color=$ahead
            fi
            if echo $git_status | grep -qe 'Your branch is behind'; then
              color=$behind
            fi
            if echo $git_status | grep -qe 'Changes to be committed'; then
              color=$staged
            fi
            if echo $git_status | grep -qe 'Changed but not updated' \
                                       -e 'Changes not staged'; then
              color=$unstaged
            fi
            if echo $git_status | grep -qe 'Your branch.*diverged'; then
              color=$diverged
              branch='${branch}!'
            fi
            echo -n ' \[\033[${color}m\](${branch})\[\033[0m\]'
          fi
          return 0
        }
        
        function _build_prompt {
          git_status=$(_show_git_status)
          if [[ $(id -u) == 0 ]] ; then
            _prompt='#'
          else
            _prompt='$'
          fi
          PS1='\u@\h${git_status}:\w${VENV}\${_prompt} '
          return 0
        }
        PROMPT_COMMAND='_build_prompt; $PROMPT_COMMAND'
    when: bashrc_grep.stdout == ''
